import gradio as gr
import asyncio
import os
from datetime import datetime
from typing import Dict, Any
import queue
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

try:
    from openai import AsyncOpenAI
except ImportError:
    print("❌ OpenAI package not found. Please install it with: pip install openai")
    exit(1)

class SimpleResearchAgent:
    def __init__(self, openai_api_key: str):
        self.client = AsyncOpenAI(api_key=openai_api_key)
        self.name = "Research Agent"
    
    async def research(self, topic: str) -> str:
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "You are an expert research agent. Create comprehensive research reports with key findings, statistics, and insights."},
                    {"role": "user", "content": f"Research and analyze: {topic}\n\nProvide a detailed research report with key findings, current trends, and actionable insights."}
                ],
                temperature=0.3,
                max_tokens=1500
            )
            
            return f"# 🔍 Research Report: {topic}\n\n{response.choices[0].message.content}\n\n*Generated by Research Agent at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
            
        except Exception as e:
            return f"❌ Research failed: {str(e)}"

class SimpleWriterAgent:
    def __init__(self, openai_api_key: str):
        self.client = AsyncOpenAI(api_key=openai_api_key)
        self.name = "Writer Agent"
    
    async def write(self, research_data: str, requirements: str, style: str) -> str:
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": f"You are an expert content writer. Create high-quality {style.lower()} content based on research data."},
                    {"role": "user", "content": f"Based on this research:\n\n{research_data}\n\nRequirements: {requirements}\n\nCreate well-structured, engaging content in {style} style."}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            return f"# ✍️ Content Created ({style} Style)\n\n{response.choices[0].message.content}\n\n*Generated by Writer Agent at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
            
        except Exception as e:
            return f"❌ Writing failed: {str(e)}"

class SimpleReviewerAgent:
    def __init__(self, openai_api_key: str):
        self.client = AsyncOpenAI(api_key=openai_api_key)
        self.name = "Reviewer Agent"
    
    async def review(self, content: str, strictness: int) -> str:
        try:
            response = await self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": f"You are an expert content reviewer. Provide thorough analysis and improvement suggestions. Strictness level: {strictness}/10"},
                    {"role": "user", "content": f"Review this content and provide detailed feedback:\n\n{content}\n\nProvide: overall assessment, strengths, areas for improvement, and specific recommendations."}
                ],
                temperature=0.3,
                max_tokens=1500
            )
            
            return f"# 📝 Content Review (Strictness: {strictness}/10)\n\n{response.choices[0].message.content}\n\n*Generated by Reviewer Agent at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*"
            
        except Exception as e:
            return f"❌ Review failed: {str(e)}"

class MultiAgentHub:
    def __init__(self):
        openai_api_key = os.getenv("OPENAI_API_KEY")
        if not openai_api_key:
            raise ValueError("OPENAI_API_KEY environment variable is required!")
        
        self.research_agent = SimpleResearchAgent(openai_api_key)
        self.writer_agent = SimpleWriterAgent(openai_api_key)
        self.reviewer_agent = SimpleReviewerAgent(openai_api_key)
        
        self.status_updates = queue.Queue()
        self.is_processing = False
    
    def update_status(self, agent_name: str, status: str, message: str):
        timestamp = datetime.now().strftime("%H:%M:%S")
        update = {
            "timestamp": timestamp,
            "agent": agent_name,
            "status": status,
            "message": message
        }
        self.status_updates.put(update)
        return update
    
    async def process_collaborative_task(self, task_description: str, requirements: str, 
                                       research_depth: int, writing_style: str, review_strictness: int):
        self.is_processing = True
        results = []
        
        try:
            # Research phase
            self.update_status("🔍 Research Agent", "🚀 Working", "Analyzing topic and gathering information...")
            research_data = await self.research_agent.research(task_description)
            
            if "❌" in research_data:
                raise Exception("Research phase failed")
            
            results.append(research_data)
            self.update_status("🔍 Research Agent", "✅ Complete", "Research completed successfully!")
            
            # Writing phase  
            self.update_status("✍️ Writer Agent", "🚀 Working", f"Creating {writing_style.lower()} content...")
            written_content = await self.writer_agent.write(research_data, requirements, writing_style)
            
            if "❌" in written_content:
                raise Exception("Writing phase failed")
            
            results.append(written_content)
            self.update_status("✍️ Writer Agent", "✅ Complete", "Content creation completed!")
            
            # Review phase
            self.update_status("📝 Reviewer Agent", "🚀 Working", f"Reviewing content (strictness: {review_strictness}/10)...")
            reviewed_content = await self.reviewer_agent.review(written_content, review_strictness)
            
            if "❌" in reviewed_content:
                raise Exception("Review phase failed")
            
            results.append(reviewed_content)
            self.update_status("📝 Reviewer Agent", "✅ Complete", "Quality review completed!")
            
            self.update_status("🤖 System", "🎉 Success", "All AI agents completed successfully!")
            
        except Exception as e:
            error_msg = str(e)
            self.update_status("❌ System", "🚨 Error", f"Task failed: {error_msg}")
            results.append(f"❌ **Error**: {error_msg}")
        finally:
            self.is_processing = False
        
        return self.compile_results(results, task_description)
    
    def compile_results(self, results: list, task: str):
        if not results:
            return "No results available."
        
        final_result = f"# 🤖 Multi-Agent AI Collaboration Results\n\n"
        final_result += f"**Task**: {task}\n"
        final_result += f"**Completed**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        final_result += f"**Agents**: Research → Writing → Review\n\n"
        final_result += "---\n\n"
        
        for result in results:
            final_result += f"{result}\n\n---\n\n"
        
        if len(results) >= 3:
            final_result += "## 🎯 Collaboration Summary\n\n"
            final_result += "✨ This report demonstrates real AI agents collaborating using OpenAI GPT models.\n"
            final_result += "🔄 The multi-agent workflow ensures comprehensive coverage and quality output.\n"
        
        return final_result
    
    def get_agent_status(self):
        statuses = []
        while not self.status_updates.empty():
            try:
                statuses.append(self.status_updates.get_nowait())
            except queue.Empty:
                break
        
        if not statuses and not self.is_processing:
            return [{"timestamp": datetime.now().strftime("%H:%M:%S"), 
                    "agent": "System", "status": "💤 Ready", "message": "Waiting for tasks"}]
        
        return statuses[-6:]  # Last 6 updates

# Global hub instance
hub = None

def run_collaborative_task(task_description, requirements, research_depth, writing_style, review_strictness, progress=gr.Progress()):
    if not task_description.strip():
        return "❌ Please provide a task description.", format_status_display()
    
    if not os.getenv("OPENAI_API_KEY"):
        return "❌ OpenAI API key not found. Please set OPENAI_API_KEY environment variable.", format_status_display()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    
    try:
        progress(0.1, desc="🚀 Initializing AI agents...")
        progress(0.3, desc="🔍 Research Agent working...")
        progress(0.6, desc="✍️ Writer Agent creating...")
        progress(0.9, desc="📝 Reviewer Agent analyzing...")
        
        result = loop.run_until_complete(
            hub.process_collaborative_task(task_description, requirements, research_depth, writing_style, review_strictness)
        )
        
        progress(1.0, desc="🎉 Collaboration complete!")
        return result, format_status_display()
        
    except Exception as e:
        return f"❌ Error: {str(e)}", format_status_display()
    finally:
        loop.close()

def format_status_display():
    statuses = hub.get_agent_status()
    if not statuses:
        return "💤 **Status**: Ready for AI collaboration tasks!"
    
    display = "## 🤖 AI Agent Status\n\n"
    for status in statuses:
        emoji = "✅" if "✅" in status['status'] else "🚀" if "🚀" in status['status'] else "❌" if "❌" in status['status'] else "⏳"
        display += f"{emoji} **{status['timestamp']}** | **{status['agent']}**: {status['message']}\n\n"
    
    return display

def refresh_status():
    return format_status_display()

def create_interface():
    with gr.Blocks(theme=gr.themes.Soft(), title="AI Multi-Agent Hub") as demo:
        gr.Markdown("""
        # 🤖 AI Multi-Agent Collaboration Hub
        **Powered by OpenAI GPT Models**
        
        Watch real AI agents collaborate: Research → Write → Review
        """)
        
        # API status
        api_status = "✅ Ready" if os.getenv("OPENAI_API_KEY") else "❌ Missing API Key"
        gr.Markdown(f"**Status**: {api_status}")
        
        with gr.Row():
            with gr.Column(scale=2):
                task_input = gr.Textbox(
                    label="🎯 Task Description",
                    placeholder="e.g., Analyze renewable energy trends in 2024...",
                    lines=4
                )
                
                requirements_input = gr.Textbox(
                    label="📝 Requirements",
                    placeholder="e.g., Include statistics, focus on solar energy...",
                    lines=2
                )
                
                with gr.Row():
                    research_depth = gr.Slider(1, 10, 5, label="🔍 Research Depth")
                    writing_style = gr.Dropdown(
                        ["Professional", "Casual", "Academic", "Creative"],
                        value="Professional",
                        label="✍️ Style"
                    )
                    review_strictness = gr.Slider(1, 10, 7, label="📝 Review Strictness")
                
                submit_btn = gr.Button("🚀 Start AI Collaboration", variant="primary", size="lg")
            
            with gr.Column(scale=1):
                status_display = gr.Markdown("💤 Ready for tasks")
                refresh_btn = gr.Button("🔄 Refresh Status")
        
        result_output = gr.Markdown("Results will appear here...")
        
        submit_btn.click(
            fn=run_collaborative_task,
            inputs=[task_input, requirements_input, research_depth, writing_style, review_strictness],
            outputs=[result_output, status_display],
            show_progress=True
        )
        
        refresh_btn.click(fn=refresh_status, outputs=[status_display])
    
    return demo

if __name__ == "__main__":
    try:
        hub = MultiAgentHub()
        print("✅ Multi-Agent Hub initialized!")
        print("🔑 OpenAI API key configured")
    except ValueError as e:
        print(f"❌ Error: {e}")
        print("Set your API key: export OPENAI_API_KEY='your-key-here'")
        exit(1)
    
    demo = create_interface()
    print("\n🚀 Launching AI Multi-Agent Hub...")
    
    demo.launch(
        server_name="0.0.0.0",
        server_port=7860,
        share=False,
        show_error=True
    )